include: 'rules/download-data.smk'
include: 'rules/downsample-reads.smk'
include: 'rules/preprocessing.smk'
include: 'rules/genotyping.smk'
include: 'rules/evaluation.smk'

coverages = ['full'] + config['downsampling']
callsets = [c for c in config["callsets"].keys()]
chromosomes = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "X"]
versions_to_run = [v for v in config['pangenie'].keys()] + [v for v in config['pangenie-modules'].keys()] + ['bayestyper', 'graphtyper']


samples_leave1out = [t for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys()]
samples_external = [t for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys()]
vartypes_leave1out = [var for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys() for var in config["callsets"][c]["leave1out"][t]["vartype"]]
vartypes_external = [var for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys() for var in config["callsets"][c]["external"][t]["vartype"]]
filters_leave1out = [f for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys() for f in config["callsets"][c]["leave1out"][t]["filters"]]
filters_external = [f for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys() for f in config["callsets"][c]["external"][t]["filters"]]
regions_leave1out = [r for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys() for r in config["callsets"][c]["leave1out"][t]["regions"]]
regions_external = [r for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys() for r in config["callsets"][c]["external"][t]["regions"]]

pipelines = ['leave1out', 'external'] ## possibilities: leave1out, external

rule all:
    input:
        expand("results/leave-one-out/{callset}/plots/resources/resources_{callset}-{coverage}.pdf", callset = [c for c in config['callsets'].keys()], coverage = coverages),
        expand("results/leave-one-out/{callset}/plots/comparison-versions/{metric}/{metric}_{coverage}_{regions}.pdf", callset = [c for c in config['callsets'].keys()], metric = ['concordance', 'precision-recall-typable', 'untyped', 'concordance-vs-untyped'], coverage = coverages, regions = ['biallelic', 'multiallelic'])


# generate all combinations of desired output files to be produced
def eval_files(wildcards):
    filenames = []
    for p in pipelines:
        if p == 'leave1out':
            regions, samples, filters, vartypes = regions_leave1out, samples_leave1out, filters_leave1out, vartypes_leave1out
        if p == 'external':
            regions, samples, filters, vartypes = regions_external, samples_external, filters_external, vartypes_external           
        for c in callsets:
            for cov in coverages:
                for v in versions_to_run:
                    for r in regions:
                        for t in samples:
                            for f in filters:
                                for var in vartypes:
                                    if var in ['snp', 'indels', 'snp-indel']:
                                        filenames.append("evaluation/" + c + "/" + t + "/" + p + "/" + v + "-" + cov + "-" + f + "-" + r + "-" + var + "/summary.txt")
                                    if var in ['large-insertion', 'large-deletion', 'sv']:
                                        filenames.append("evaluation/" + c + "/" + t + "/" + p + "/" + v + "-" + cov + "-" + f + "-" + r + "-" + var + "/summary.json")
                                        
    return filenames

rule evaluation:
    input:
        eval_files