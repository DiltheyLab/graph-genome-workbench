coverages = ['full'] + config['downsampling']
callsets = [c for c in config["callsets"].keys()]
chromosomes = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "X"]
versions_to_run = [v for v in config['pangenie'].keys()] + [v for v in config['pangenie-modules'].keys()] + ['bayestyper', 'graphtyper']
# chromosomes = ["17"] ## used for reduced-data version


samples_leave1out = [t for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys()]
samples_external = [t for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys()]
vartypes_leave1out = [var for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys() for var in config["callsets"][c]["leave1out"][t]["vartype"]]
vartypes_external = [var for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys() for var in config["callsets"][c]["external"][t]["vartype"]]
filters_leave1out = [f for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys() for f in config["callsets"][c]["leave1out"][t]["filters"]]
filters_external = [f for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys() for f in config["callsets"][c]["external"][t]["filters"]]
regions_leave1out = [r for c in config["callsets"].keys() for t in config["callsets"][c]["leave1out"].keys() for r in config["callsets"][c]["leave1out"][t]["regions"]]
regions_external = [r for c in config["callsets"].keys() for t in config["callsets"][c]["external"].keys() for r in config["callsets"][c]["external"][t]["regions"]]

pipelines = ['leave1out', 'external'] ## possibilities: leave1out, external

include: 'rules/download-data.smk'
include: 'rules/downsample-reads.smk'
include: 'rules/preprocessing.smk'
include: 'rules/genotyping.smk'
include: 'rules/evaluation.smk'


def plotting(wildcards):
    filenames = []
    for p in pipelines:
    # for p in ['leave1out']:
        if p == 'leave1out':
            regions, samples, filters, vartypes = regions_leave1out, samples_leave1out, filters_leave1out, vartypes_leave1out
        if p == 'external':
            regions, samples, filters, vartypes = regions_external, samples_external, filters_external, vartypes_external           
        for c in callsets:
            for cov in coverages:
                for t in samples:
                    for r in regions:
                        for v in versions_to_run:
                            for f in filters:
                                for m in ['concordance', 'precision-recall', 'untyped', 'concordance-vs-untyped']:
                                    for var in vartypes:
                                        filenames.append("evalplots/" + c + "/" + t + "/" + p + "/comparison-versions/" + m + "-" + cov + "-" + f + "-" + r + ".pdf")
                    filenames.append("evalplots/" + c + "/" + t + "/resources/resources_" + cov + ".pdf")
    return filenames

rule all:
    input:
        plotting

